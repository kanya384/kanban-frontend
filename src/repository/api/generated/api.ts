/* tslint:disable */
/* eslint-disable */
/**
 * Kanban API
 * Kanban
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: kanya384@mail.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Сущность аутентификации
 * @export
 * @interface AuthRequest
 */
export interface AuthRequest {
    /**
     * Логин (email)
     * @type {string}
     * @memberof AuthRequest
     */
    'username'?: string;
    /**
     * Пароль
     * @type {string}
     * @memberof AuthRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface JsonNullableInteger
 */
export interface JsonNullableInteger {
    /**
     * 
     * @type {boolean}
     * @memberof JsonNullableInteger
     */
    'present'?: boolean;
}
/**
 * 
 * @export
 * @interface JsonNullableString
 */
export interface JsonNullableString {
    /**
     * 
     * @type {boolean}
     * @memberof JsonNullableString
     */
    'present'?: boolean;
}
/**
 * 
 * @export
 * @interface KanbanCreateDTO
 */
export interface KanbanCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof KanbanCreateDTO
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface KanbanDTO
 */
export interface KanbanDTO {
    /**
     * 
     * @type {number}
     * @memberof KanbanDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof KanbanDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof KanbanDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof KanbanDTO
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface KanbanDetailedDTO
 */
export interface KanbanDetailedDTO {
    /**
     * 
     * @type {number}
     * @memberof KanbanDetailedDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof KanbanDetailedDTO
     */
    'title'?: string;
    /**
     * 
     * @type {Set<StatusDTO>}
     * @memberof KanbanDetailedDTO
     */
    'statuses'?: Set<StatusDTO>;
    /**
     * 
     * @type {string}
     * @memberof KanbanDetailedDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof KanbanDetailedDTO
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface KanbanUpdateDTO
 */
export interface KanbanUpdateDTO {
    /**
     * 
     * @type {JsonNullableString}
     * @memberof KanbanUpdateDTO
     */
    'title': JsonNullableString;
}
/**
 * 
 * @export
 * @interface StatusCreateDTO
 */
export interface StatusCreateDTO {
    /**
     * 
     * @type {number}
     * @memberof StatusCreateDTO
     */
    'kanbanId': number;
    /**
     * 
     * @type {string}
     * @memberof StatusCreateDTO
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface StatusDTO
 */
export interface StatusDTO {
    /**
     * 
     * @type {number}
     * @memberof StatusDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StatusDTO
     */
    'title'?: string;
    /**
     * 
     * @type {Set<TaskDTO>}
     * @memberof StatusDTO
     */
    'tasks'?: Set<TaskDTO>;
    /**
     * 
     * @type {string}
     * @memberof StatusDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof StatusDTO
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface StatusUpdateDTO
 */
export interface StatusUpdateDTO {
    /**
     * 
     * @type {JsonNullableString}
     * @memberof StatusUpdateDTO
     */
    'title': JsonNullableString;
}
/**
 * 
 * @export
 * @interface TaskCreateDto
 */
export interface TaskCreateDto {
    /**
     * 
     * @type {string}
     * @memberof TaskCreateDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TaskCreateDto
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof TaskCreateDto
     */
    'statusId': number;
}
/**
 * 
 * @export
 * @interface TaskDTO
 */
export interface TaskDTO {
    /**
     * 
     * @type {number}
     * @memberof TaskDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    'content'?: string;
    /**
     * 
     * @type {UserDTO}
     * @memberof TaskDTO
     */
    'assignee'?: UserDTO;
    /**
     * 
     * @type {UserDTO}
     * @memberof TaskDTO
     */
    'author'?: UserDTO;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskDTO
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TaskUpdateDTO
 */
export interface TaskUpdateDTO {
    /**
     * 
     * @type {JsonNullableString}
     * @memberof TaskUpdateDTO
     */
    'title'?: JsonNullableString;
    /**
     * 
     * @type {JsonNullableString}
     * @memberof TaskUpdateDTO
     */
    'content'?: JsonNullableString;
    /**
     * 
     * @type {JsonNullableInteger}
     * @memberof TaskUpdateDTO
     */
    'statusId'?: JsonNullableInteger;
}
/**
 * 
 * @export
 * @interface UserCreateDTO
 */
export interface UserCreateDTO {
    /**
     * Имя пользователя
     * @type {string}
     * @memberof UserCreateDTO
     */
    'name': string;
    /**
     * Email пользователя
     * @type {string}
     * @memberof UserCreateDTO
     */
    'email': string;
    /**
     * Пароль пользователя
     * @type {string}
     * @memberof UserCreateDTO
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {number}
     * @memberof UserDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'updatedAt'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} collaboratorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCollaboratorToKanban: async (id: number, collaboratorId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addCollaboratorToKanban', 'id', id)
            // verify required parameter 'collaboratorId' is not null or undefined
            assertParamExists('addCollaboratorToKanban', 'collaboratorId', collaboratorId)
            const localVarPath = `/kanban/{id}/collaborator/{collaboratorId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"collaboratorId"}}`, encodeURIComponent(String(collaboratorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserCreateDTO} userCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (userCreateDTO: UserCreateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateDTO' is not null or undefined
            assertParamExists('create', 'userCreateDTO', userCreateDTO)
            const localVarPath = `/user/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TaskCreateDto} taskCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1: async (taskCreateDto: TaskCreateDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskCreateDto' is not null or undefined
            assertParamExists('create1', 'taskCreateDto', taskCreateDto)
            const localVarPath = `/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {StatusCreateDTO} statusCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2: async (statusCreateDTO: StatusCreateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'statusCreateDTO' is not null or undefined
            assertParamExists('create2', 'statusCreateDTO', statusCreateDTO)
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(statusCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Позволяет аутентифицировать пользователя
         * @summary Аутентификация пользователя
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3: async (authRequest: AuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRequest' is not null or undefined
            assertParamExists('create3', 'authRequest', authRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {KanbanCreateDTO} kanbanCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create4: async (kanbanCreateDTO: KanbanCreateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kanbanCreateDTO' is not null or undefined
            assertParamExists('create4', 'kanbanCreateDTO', kanbanCreateDTO)
            const localVarPath = `/kanban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kanbanCreateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete1', 'id', id)
            const localVarPath = `/status/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('delete2', 'id', id)
            const localVarPath = `/kanban/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCollaboratedByUserKanbans: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kanban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findKanbanById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findKanbanById', 'id', id)
            const localVarPath = `/kanban/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findStatusById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findStatusById', 'id', id)
            const localVarPath = `/status/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTaskById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findTaskById', 'id', id)
            const localVarPath = `/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findUserById', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersKanbans: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('findUsersKanbans', 'id', id)
            const localVarPath = `/user/{id}/kanban`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} collaboratorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCollaboratorFromKanban: async (id: number, collaboratorId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeCollaboratorFromKanban', 'id', id)
            // verify required parameter 'collaboratorId' is not null or undefined
            assertParamExists('removeCollaboratorFromKanban', 'collaboratorId', collaboratorId)
            const localVarPath = `/kanban/{id}/collaborator/{collaboratorId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"collaboratorId"}}`, encodeURIComponent(String(collaboratorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TaskUpdateDTO} taskUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: number, taskUpdateDTO: TaskUpdateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'taskUpdateDTO' is not null or undefined
            assertParamExists('update', 'taskUpdateDTO', taskUpdateDTO)
            const localVarPath = `/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {StatusUpdateDTO} statusUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1: async (id: number, statusUpdateDTO: StatusUpdateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update1', 'id', id)
            // verify required parameter 'statusUpdateDTO' is not null or undefined
            assertParamExists('update1', 'statusUpdateDTO', statusUpdateDTO)
            const localVarPath = `/status/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(statusUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {KanbanUpdateDTO} kanbanUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2: async (id: number, kanbanUpdateDTO: KanbanUpdateDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update2', 'id', id)
            // verify required parameter 'kanbanUpdateDTO' is not null or undefined
            assertParamExists('update2', 'kanbanUpdateDTO', kanbanUpdateDTO)
            const localVarPath = `/kanban/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kanbanUpdateDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} collaboratorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCollaboratorToKanban(id: number, collaboratorId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCollaboratorToKanban(id, collaboratorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserCreateDTO} userCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(userCreateDTO: UserCreateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(userCreateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TaskCreateDto} taskCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create1(taskCreateDto: TaskCreateDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create1(taskCreateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {StatusCreateDTO} statusCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create2(statusCreateDTO: StatusCreateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create2(statusCreateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Позволяет аутентифицировать пользователя
         * @summary Аутентификация пользователя
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create3(authRequest: AuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create3(authRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {KanbanCreateDTO} kanbanCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create4(kanbanCreateDTO: KanbanCreateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KanbanDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create4(kanbanCreateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete1(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete1(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete2(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete2(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllCollaboratedByUserKanbans(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KanbanDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllCollaboratedByUserKanbans(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findKanbanById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KanbanDetailedDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findKanbanById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findStatusById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findStatusById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findTaskById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findTaskById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUserById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUserById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUsersKanbans(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KanbanDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUsersKanbans(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} collaboratorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCollaboratorFromKanban(id: number, collaboratorId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCollaboratorFromKanban(id, collaboratorId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TaskUpdateDTO} taskUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: number, taskUpdateDTO: TaskUpdateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, taskUpdateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {StatusUpdateDTO} statusUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update1(id: number, statusUpdateDTO: StatusUpdateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update1(id, statusUpdateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {KanbanUpdateDTO} kanbanUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update2(id: number, kanbanUpdateDTO: KanbanUpdateDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KanbanDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update2(id, kanbanUpdateDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} collaboratorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCollaboratorToKanban(id: number, collaboratorId: number, options?: any): AxiosPromise<void> {
            return localVarFp.addCollaboratorToKanban(id, collaboratorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserCreateDTO} userCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(userCreateDTO: UserCreateDTO, options?: any): AxiosPromise<UserDTO> {
            return localVarFp.create(userCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TaskCreateDto} taskCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create1(taskCreateDto: TaskCreateDto, options?: any): AxiosPromise<TaskDTO> {
            return localVarFp.create1(taskCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StatusCreateDTO} statusCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create2(statusCreateDTO: StatusCreateDTO, options?: any): AxiosPromise<StatusDTO> {
            return localVarFp.create2(statusCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * Позволяет аутентифицировать пользователя
         * @summary Аутентификация пользователя
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create3(authRequest: AuthRequest, options?: any): AxiosPromise<string> {
            return localVarFp.create3(authRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KanbanCreateDTO} kanbanCreateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create4(kanbanCreateDTO: KanbanCreateDTO, options?: any): AxiosPromise<KanbanDTO> {
            return localVarFp.create4(kanbanCreateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete1(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.delete1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete2(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.delete2(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllCollaboratedByUserKanbans(options?: any): AxiosPromise<Array<KanbanDTO>> {
            return localVarFp.findAllCollaboratedByUserKanbans(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findKanbanById(id: number, options?: any): AxiosPromise<KanbanDetailedDTO> {
            return localVarFp.findKanbanById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findStatusById(id: number, options?: any): AxiosPromise<StatusDTO> {
            return localVarFp.findStatusById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findTaskById(id: number, options?: any): AxiosPromise<TaskDTO> {
            return localVarFp.findTaskById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserById(id: number, options?: any): AxiosPromise<UserDTO> {
            return localVarFp.findUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUsersKanbans(id: number, options?: any): AxiosPromise<Array<KanbanDTO>> {
            return localVarFp.findUsersKanbans(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} collaboratorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCollaboratorFromKanban(id: number, collaboratorId: number, options?: any): AxiosPromise<void> {
            return localVarFp.removeCollaboratorFromKanban(id, collaboratorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {TaskUpdateDTO} taskUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: number, taskUpdateDTO: TaskUpdateDTO, options?: any): AxiosPromise<TaskDTO> {
            return localVarFp.update(id, taskUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {StatusUpdateDTO} statusUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update1(id: number, statusUpdateDTO: StatusUpdateDTO, options?: any): AxiosPromise<StatusDTO> {
            return localVarFp.update1(id, statusUpdateDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {KanbanUpdateDTO} kanbanUpdateDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update2(id: number, kanbanUpdateDTO: KanbanUpdateDTO, options?: any): AxiosPromise<KanbanDTO> {
            return localVarFp.update2(id, kanbanUpdateDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public _delete(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration)._delete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} collaboratorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCollaboratorToKanban(id: number, collaboratorId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addCollaboratorToKanban(id, collaboratorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserCreateDTO} userCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create(userCreateDTO: UserCreateDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create(userCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TaskCreateDto} taskCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create1(taskCreateDto: TaskCreateDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create1(taskCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StatusCreateDTO} statusCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create2(statusCreateDTO: StatusCreateDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create2(statusCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Позволяет аутентифицировать пользователя
     * @summary Аутентификация пользователя
     * @param {AuthRequest} authRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create3(authRequest: AuthRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create3(authRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KanbanCreateDTO} kanbanCreateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public create4(kanbanCreateDTO: KanbanCreateDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).create4(kanbanCreateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delete1(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).delete1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delete2(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).delete2(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAllCollaboratedByUserKanbans(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAllCollaboratedByUserKanbans(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findKanbanById(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findKanbanById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findStatusById(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findStatusById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findTaskById(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findTaskById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findUserById(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findUsersKanbans(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findUsersKanbans(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} collaboratorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeCollaboratorFromKanban(id: number, collaboratorId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).removeCollaboratorFromKanban(id, collaboratorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {TaskUpdateDTO} taskUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public update(id: number, taskUpdateDTO: TaskUpdateDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).update(id, taskUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {StatusUpdateDTO} statusUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public update1(id: number, statusUpdateDTO: StatusUpdateDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).update1(id, statusUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {KanbanUpdateDTO} kanbanUpdateDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public update2(id: number, kanbanUpdateDTO: KanbanUpdateDTO, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).update2(id, kanbanUpdateDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


